/*
  # Daily Affirmations Feature - Database Schema

  ## Overview
  This migration creates the database schema for the Daily Affirmations feature, which generates
  personalized positive affirmations for users based on their calendar events, family profiles,
  tasks, shopping lists, and other contextual data using OpenAI.

  ## New Tables

  ### `affirmations`
  Stores generated affirmations for users with metadata about what data was used to create them.
  
  **Columns:**
  - `id` (uuid, primary key) - Unique identifier for each affirmation
  - `user_id` (uuid, foreign key) - References the user who owns this affirmation
  - `affirmation_text` (text) - The actual affirmation message generated by AI
  - `generated_date` (date) - The date this affirmation was generated for
  - `data_sources` (jsonb) - JSON object tracking what data was used (calendar, tasks, family, etc.)
  - `viewed` (boolean) - Whether the user has seen this affirmation
  - `favorited` (boolean) - Whether the user marked this as a favorite
  - `created_at` (timestamptz) - Timestamp when record was created
  - `updated_at` (timestamptz) - Timestamp when record was last updated

  ### `affirmation_settings`
  Stores user preferences for how and when they want to receive affirmations.
  
  **Columns:**
  - `id` (uuid, primary key) - Unique identifier
  - `user_id` (uuid, foreign key, unique) - References the user (one setting per user)
  - `enabled` (boolean) - Whether affirmations are enabled for this user
  - `frequency` (text) - How often to generate: 'once_daily', 'twice_daily', 'custom'
  - `preferred_time` (time) - Preferred time of day for affirmations (HH:MM:SS)
  - `secondary_time` (time) - Optional second time for twice_daily frequency
  - `timezone` (text) - User's timezone (e.g., 'America/New_York')
  - `include_calendar` (boolean) - Include calendar events in context
  - `include_tasks` (boolean) - Include tasks in context
  - `include_family` (boolean) - Include family member info in context
  - `include_shopping` (boolean) - Include shopping list in context
  - `created_at` (timestamptz) - Timestamp when record was created
  - `updated_at` (timestamptz) - Timestamp when record was last updated

  ## Security
  - Enable Row Level Security (RLS) on both tables
  - Users can only read/write their own affirmations and settings
  - Policies enforce authentication and ownership checks

  ## Indexes
  - Index on user_id and generated_date for fast affirmation lookups
  - Index on user_id for settings lookups
  - Index on generated_date for date-based queries

  ## Notes
  - Each user can have multiple affirmations (one per day typically)
  - Each user has exactly one settings record (enforced by unique constraint)
  - Affirmations are never deleted, allowing users to view history
  - Default settings create affirmations once daily at 8:00 AM with all data sources enabled
*/

-- Create affirmations table
CREATE TABLE IF NOT EXISTS affirmations (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  affirmation_text text NOT NULL,
  generated_date date NOT NULL DEFAULT CURRENT_DATE,
  data_sources jsonb DEFAULT '{"calendar": true, "tasks": true, "family": true, "shopping": true}'::jsonb,
  viewed boolean DEFAULT false,
  favorited boolean DEFAULT false,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  CONSTRAINT unique_user_date UNIQUE(user_id, generated_date)
);

-- Create affirmation_settings table
CREATE TABLE IF NOT EXISTS affirmation_settings (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE UNIQUE,
  enabled boolean DEFAULT true,
  frequency text CHECK (frequency IN ('once_daily', 'twice_daily', 'custom')) DEFAULT 'once_daily',
  preferred_time time DEFAULT '08:00:00',
  secondary_time time DEFAULT '20:00:00',
  timezone text DEFAULT 'America/New_York',
  include_calendar boolean DEFAULT true,
  include_tasks boolean DEFAULT true,
  include_family boolean DEFAULT true,
  include_shopping boolean DEFAULT true,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Enable Row Level Security
ALTER TABLE affirmations ENABLE ROW LEVEL SECURITY;
ALTER TABLE affirmation_settings ENABLE ROW LEVEL SECURITY;

-- RLS Policies for affirmations table
CREATE POLICY "Users can read own affirmations"
  ON affirmations
  FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own affirmations"
  ON affirmations
  FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own affirmations"
  ON affirmations
  FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete own affirmations"
  ON affirmations
  FOR DELETE
  TO authenticated
  USING (auth.uid() = user_id);

-- RLS Policies for affirmation_settings table
CREATE POLICY "Users can read own settings"
  ON affirmation_settings
  FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own settings"
  ON affirmation_settings
  FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own settings"
  ON affirmation_settings
  FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete own settings"
  ON affirmation_settings
  FOR DELETE
  TO authenticated
  USING (auth.uid() = user_id);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_affirmations_user_date 
  ON affirmations(user_id, generated_date DESC);

CREATE INDEX IF NOT EXISTS idx_affirmations_user_viewed 
  ON affirmations(user_id, viewed);

CREATE INDEX IF NOT EXISTS idx_affirmation_settings_user 
  ON affirmation_settings(user_id);

-- Trigger to update updated_at timestamp on affirmations
CREATE TRIGGER update_affirmations_updated_at
  BEFORE UPDATE ON affirmations
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- Trigger to update updated_at timestamp on affirmation_settings
CREATE TRIGGER update_affirmation_settings_updated_at
  BEFORE UPDATE ON affirmation_settings
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- Function to initialize default affirmation settings for new users
CREATE OR REPLACE FUNCTION initialize_affirmation_settings()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO affirmation_settings (user_id)
  VALUES (NEW.id)
  ON CONFLICT (user_id) DO NOTHING;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to create default settings when a new user profile is created
CREATE TRIGGER create_default_affirmation_settings
  AFTER INSERT ON profiles
  FOR EACH ROW
  EXECUTE FUNCTION initialize_affirmation_settings();